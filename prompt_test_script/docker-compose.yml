version: '3.8'

# ============================================================================
# LOCAL DEVELOPMENT STACK
# ============================================================================
# This Docker Compose file is for LOCAL DEVELOPMENT AND TESTING ONLY.
# 
# In PRODUCTION, your customer will:
# 1. Run only the ai-detector-eval container
# 2. Use their existing Grafana + Mimir infrastructure
# 3. Set PROMETHEUS_REMOTE_WRITE_URL to their Mimir endpoint
# 4. Set PROMETHEUS_TENANT_ID to their tenant ID
#
# This stack includes Mimir and Grafana so developers can test the full
# metrics pipeline locally without needing external infrastructure.
# ============================================================================

services:
  # Grafana Mimir - Metrics backend with Remote Write support
  mimir:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    ports:
      - "9009:9009"  # HTTP
    volumes:
      - ./mimir-config.yaml:/etc/mimir.yaml
      - mimir-data:/data
    networks:
      - eval-network
  
  # Grafana - Visualization dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./grafana-datasource.yaml:/etc/grafana/provisioning/datasources/mimir.yaml
      - grafana-data:/var/lib/grafana
    networks:
      - eval-network
    depends_on:
      - mimir
  
  # AI Detector Evaluation Container
  ai-detector-eval:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # API Configuration
      - DETECTOR_API_URL=${DETECTOR_API_URL:-http://host.docker.internal:8000}
      - DETECTOR_API_TOKEN=${DETECTOR_API_TOKEN}
      
      # LLM Provider API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Prometheus Remote Write (via OpenTelemetry)
      - PROMETHEUS_REMOTE_WRITE_URL=http://mimir:9009/api/v1/push
      - PROMETHEUS_TENANT_ID=anonymous
      
      # Run Metadata
      - RUN_ID=${RUN_ID:-local-test-$(date +%s)}
      - DATASET_VERSION=${DATASET_VERSION:-v1.0}
      - GIT_COMMIT_SHA=${GIT_COMMIT_SHA:-local}
      
      # Output
      - OUTPUT_DIR=/tmp/output
    
    volumes:
      # Input data
      - ./sample_prompts.csv:/tmp/input/prompts.csv:ro
      
      # Output data
      - ./test_results:/tmp/output
    
    command: >
      --input /tmp/input/prompts.csv
      --generate-and-test
      --save-jsonl
      --save-manifest
      --output-dir /tmp/output
    
    networks:
      - eval-network
    
    depends_on:
      - mimir
    
    # Optional: Add resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

volumes:
  mimir-data:
  grafana-data:

networks:
  eval-network:
    driver: bridge
